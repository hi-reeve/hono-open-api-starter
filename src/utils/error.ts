import { HTTP_STATUS_CODE } from '~/utils/http-status-codes';

export const ERROR_MESSAGES = {
	AUTH: {
		INVALID_CREDENTIALS: 'error.auth.invalid-credentials',
	},
	HTTP: {
		BAD_GATEWAY: 'error.http.bad-gateway',
		BAD_REQUEST: 'error.http.bad-request',
		CONFLICT: 'error.http.conflict',
		FORBIDDEN: 'error.http.forbidden',
		GATEWAY_TIMEOUT: 'error.http.gateway-timeout',
		GONE: 'error.http.gone',
		I_AM_A_TEAPOT: 'error.http.i-am-a-teapot',
		INTERNAL_SERVER_ERROR: 'error.http.internal-server-error',
		METHOD_NOT_ALLOWED: 'error.http.method-not-allowed',
		NOT_ACCEPTABLE: 'error.http.not-acceptable',
		NOT_FOUND: 'error.http.not-found',
		NOT_IMPLEMENTED: 'error.http.not-implemented',
		PAYLOAD_TOO_LARGE: 'error.http.payload-too-large',
		PRECONDITION_FAILED: 'error.http.precondition-failed',
		REQUEST_TIMEOUT: 'error.http.request-timeout',
		SERVICE_UNAVAILABLE: 'error.http.service-unavailable',
		UNAUTHORIZED: 'error.http.unauthorized',
		UNPROCESSABLE_ENTITY: 'error.http.unprocessable-entity',
		UNSUPPORTED_MEDIA_TYPE: 'error.http.unsupported-media-type',
	},
	TOKEN: {
		AUDIENCE_INVALID: 'error.token.audience-invalid',
		EXPIRED: 'error.token.expired',
		HEADER_INVALID: 'error.token.header-invalid',
		INVALID: 'error.token.invalid',
		ISSUED_AT: 'error.token.issued-at',
		NOT_BEFORE: 'error.token.not-before',
		SIGNATURE_MISMATCH: 'error.token.signature-mismatch',
	},
} as const;

export type ErrorMessage = {
	[K in keyof typeof ERROR_MESSAGES]: (typeof ERROR_MESSAGES)[K][keyof (typeof ERROR_MESSAGES)[K]];
}[keyof typeof ERROR_MESSAGES];

export type HttpErrorStatusCode =
	| typeof HTTP_STATUS_CODE.BAD_GATEWAY
	| typeof HTTP_STATUS_CODE.BAD_REQUEST
	| typeof HTTP_STATUS_CODE.CONFLICT
	| typeof HTTP_STATUS_CODE.FORBIDDEN
	| typeof HTTP_STATUS_CODE.GATEWAY_TIMEOUT
	| typeof HTTP_STATUS_CODE.GONE
	| typeof HTTP_STATUS_CODE.IM_A_TEAPOT
	| typeof HTTP_STATUS_CODE.INTERNAL_SERVER_ERROR
	| typeof HTTP_STATUS_CODE.METHOD_NOT_ALLOWED
	| typeof HTTP_STATUS_CODE.NOT_ACCEPTABLE
	| typeof HTTP_STATUS_CODE.NOT_FOUND
	| typeof HTTP_STATUS_CODE.NOT_IMPLEMENTED
	| typeof HTTP_STATUS_CODE.PAYLOAD_TOO_LARGE
	| typeof HTTP_STATUS_CODE.PRECONDITION_FAILED
	| typeof HTTP_STATUS_CODE.REQUEST_TIMEOUT
	| typeof HTTP_STATUS_CODE.SERVICE_UNAVAILABLE
	| typeof HTTP_STATUS_CODE.UNAUTHORIZED
	| typeof HTTP_STATUS_CODE.UNPROCESSABLE_ENTITY
	| typeof HTTP_STATUS_CODE.UNSUPPORTED_MEDIA_TYPE;

export const HttpErrorPhrases: Record<HttpErrorStatusCode, ErrorMessage> = {
	[HTTP_STATUS_CODE.BAD_GATEWAY]: ERROR_MESSAGES.HTTP.BAD_GATEWAY,
	[HTTP_STATUS_CODE.BAD_REQUEST]: ERROR_MESSAGES.HTTP.BAD_REQUEST,
	[HTTP_STATUS_CODE.CONFLICT]: ERROR_MESSAGES.HTTP.CONFLICT,
	[HTTP_STATUS_CODE.FORBIDDEN]: ERROR_MESSAGES.HTTP.FORBIDDEN,
	[HTTP_STATUS_CODE.GATEWAY_TIMEOUT]: ERROR_MESSAGES.HTTP.GATEWAY_TIMEOUT,
	[HTTP_STATUS_CODE.GONE]: ERROR_MESSAGES.HTTP.GONE,
	[HTTP_STATUS_CODE.IM_A_TEAPOT]: ERROR_MESSAGES.HTTP.I_AM_A_TEAPOT,
	[HTTP_STATUS_CODE.INTERNAL_SERVER_ERROR]:
        ERROR_MESSAGES.HTTP.INTERNAL_SERVER_ERROR,
	[HTTP_STATUS_CODE.METHOD_NOT_ALLOWED]: ERROR_MESSAGES.HTTP.METHOD_NOT_ALLOWED,
	[HTTP_STATUS_CODE.NOT_ACCEPTABLE]: ERROR_MESSAGES.HTTP.NOT_ACCEPTABLE,
	[HTTP_STATUS_CODE.NOT_FOUND]: ERROR_MESSAGES.HTTP.NOT_FOUND,
	[HTTP_STATUS_CODE.NOT_IMPLEMENTED]: ERROR_MESSAGES.HTTP.NOT_IMPLEMENTED,
	[HTTP_STATUS_CODE.PAYLOAD_TOO_LARGE]: ERROR_MESSAGES.HTTP.PAYLOAD_TOO_LARGE,
	[HTTP_STATUS_CODE.PRECONDITION_FAILED]: ERROR_MESSAGES.HTTP.PRECONDITION_FAILED,
	[HTTP_STATUS_CODE.REQUEST_TIMEOUT]: ERROR_MESSAGES.HTTP.REQUEST_TIMEOUT,
	[HTTP_STATUS_CODE.SERVICE_UNAVAILABLE]: ERROR_MESSAGES.HTTP.SERVICE_UNAVAILABLE,
	[HTTP_STATUS_CODE.UNAUTHORIZED]: ERROR_MESSAGES.HTTP.UNAUTHORIZED,
	[HTTP_STATUS_CODE.UNPROCESSABLE_ENTITY]: ERROR_MESSAGES.HTTP.UNPROCESSABLE_ENTITY,
	[HTTP_STATUS_CODE.UNSUPPORTED_MEDIA_TYPE]:
        ERROR_MESSAGES.HTTP.UNSUPPORTED_MEDIA_TYPE,
};
